# =================================================================
# FILE: docker-compose.frontend.yml
# A focused configuration for running only the frontend and its direct API dependencies.
# =================================================================

services:
  # --- Backend Dependencies ---
  db:
    image: postgres:16-alpine
    container_name: noda_turbo_postgres
    restart: always
    ports: ["${POSTGRES_PORT}:5432"]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes: ["db_data:/var/lib/postgresql/data"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: noda_turbo_redis
    restart: always
    ports: ["6379:6379"]
    volumes: ["redis_data:/data"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # --- API Service ---
  graphql-api:
    build:
      context: .
      dockerfile: ./apps/graphql-api/Dockerfile
    container_name: noda_turbo_graphql_api
    restart: always
    ports: ["4000:4000"]
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      DATABASE_URL: ${DATABASE_URL_DOCKER}
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET: ${JWT_SECRET}
      PORT: 4000

  # --- Frontend Application ---
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: noda_turbo_web
    restart: always
    ports: ["3001:3000"] # Exposed on 3001
    depends_on:
      - graphql-api
    environment:
      NEXT_PUBLIC_API_URL: http://graphql-api:4000

# Named volumes for persistent data
volumes:
  db_data:
  redis_data: