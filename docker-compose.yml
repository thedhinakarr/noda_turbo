# noda_turbo/docker-compose.yml

services:
  # PostgreSQL Database Service
  db:
    image: postgres:16-alpine # Using a lightweight PostgreSQL image
    container_name: noda_turbo_postgres
    ports:
      - "5432:5432" # Map container port 5432 to host port 5432
    environment:
      # Database Credentials (MATCH THESE TO YOUR .env files LATER)
      POSTGRES_DB: noda_turbo_db
      POSTGRES_USER: noda_user
      POSTGRES_PASSWORD: noda_password
    volumes:
      # Persist data outside the container
      - db_data:/var/lib/postgresql/data
      # Optional: Copy a SQL script into the container to run on first start
      # This is useful for initial setup, but we'll run our migration manually for now.
      # - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Service (for GraphQL Subscriptions PubSub)
  redis:
    image: redis:7-alpine # Using a lightweight Redis image
    container_name: noda_turbo_redis
    ports:
      - "6379:6379" # Map container port 6379 to host port 6379
    volumes:
      # Persist Redis data
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Data Ingestion Service
  ingestor:
    build:
      context: . # <-- CHANGE THIS: Context is now the monorepo root
      dockerfile: ./apps/data-ingestion-service/Dockerfile # <-- CHANGE THIS: Specify full path to Dockerfile
    container_name: noda_turbo_ingestor
    environment:
      PG_HOST: db
      PG_PORT: 5432
      PG_DATABASE: noda_turbo_db
      PG_USER: noda_user
      PG_PASSWORD: noda_password
      CSV_INCOMING_DIR: /app/apps/data-ingestion-service/data/incoming # <-- ADJUST PATH INSIDE CONTAINER
      CSV_PROCESSED_DIR: /app/apps/data-ingestion-service/data/processed # <-- ADJUST PATH INSIDE CONTAINER
      CSV_ERROR_DIR: /app/apps/data-ingestion-service/data/errors # <-- ADJUST PATH INSIDE CONTAINER
    volumes:
      # Mount the entire apps/data-ingestion-service directory into the container
      - ./apps/data-ingestion-service:/app/apps/data-ingestion-service
      # If you prefer to mount only the /data folder for simplicity, use this instead:
      # - ./apps/data-ingestion-service/data:/app/apps/data-ingestion-service/data
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

volumes:
  db_data:
  redis_data: