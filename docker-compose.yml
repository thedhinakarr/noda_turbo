# This docker-compose file includes the new tool services (db-tools, pdf-tools, rag-service)
# and updates the llm-service to depend on them.

services:
  # --- Infrastructure Services (Unchanged) ---
  db:
    image: pgvector/pgvector:pg16
    container_name: noda_turbo_postgres
    restart: always
    ports: [ "${POSTGRES_PORT}:5432" ]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes: [ "db_data:/var/lib/postgresql/data" ]
    networks:
      - noda_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: noda_turbo_redis
    restart: always
    ports: [ "6379:6379" ]
    volumes: [ "redis_data:/data" ]
    networks:
      - noda_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  # --- Existing Application Services (Unchanged) ---
  ingestor:
    build:
      context: .
      dockerfile: ./apps/data-ingestion-service/Dockerfile
    container_name: noda_turbo_ingestor
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    volumes: [ "./apps/data-ingestion-service/data:/app/apps/data-ingestion-service/data" ]
    networks:
      - noda_network
  
  docs:
    build:
      context: .
      dockerfile: ./apps/docs/Dockerfile
    container_name: noda_turbo_docs
    restart: always
    ports: [ "3002:3000" ]
    volumes: [ "./apps/docs:/book" ]
    networks:
      - noda_network

  # --- NEW: Tooling Microservices ---
  db-tools:
    build:
      context: .
      dockerfile: ./apps/db-tools/Dockerfile
    container_name: noda_turbo_db_tools
    restart: always
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    networks:
      - noda_network
    depends_on:
      db:
        condition: service_healthy

  pdf-tools:
    build:
      context: .
      dockerfile: ./apps/pdf-tools/Dockerfile
    container_name: noda_turbo_pdf_tools
    restart: always
    volumes:
      # This shared volume is crucial. It allows this service to create PDFs
      # and the llm-service to serve them from the same directory.
      - ./apps/llm-service/reports:/app/reports
    networks:
      - noda_network

  rag-service:
    build:
      context: .
      dockerfile: ./apps/rag-service/Dockerfile
    container_name: noda_turbo_rag_service
    restart: always
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    networks:
      - noda_network
    depends_on:
      db:
        condition: service_healthy


  # --- MODIFIED: Core Application Services ---
  llm-service:
    build:
      context: .
      dockerfile: ./apps/llm-service/Dockerfile
    container_name: noda_turbo_llm_service
    restart: always
    ports:
      - "5001:5001"
    env_file:
      - .env
    depends_on:
      # The llm-service now waits for all its tools to start
      db-tools:
        condition: service_started
      pdf-tools:
        condition: service_started
      rag-service:
        condition: service_started
    environment:
      # The llm-service no longer needs direct DB credentials.
      # It delegates tasks to the tool services.
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    volumes:
      # This service needs access to the reports directory to serve the files
      # generated by pdf-tools.
      - ./apps/llm-service/reports:/app/reports
    networks:
      - noda_network

  graphql-api:
    build:
      context: .
      dockerfile: ./apps/graphql-api/Dockerfile
    container_name: noda_turbo_graphql_api
    restart: always
    ports: [ "4000:4000" ]
    env_file:
      - .env
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
      llm-service:
        condition: service_started
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      REDIS_URL: "redis://redis:6379"
      LLM_SERVICE_URL: "http://llm-service:5001" # Correct URL for inter-service communication
      PORT: 4000
    networks:
      - noda_network

# --- Named Volumes (Unchanged) ---
volumes:
  db_data:
  redis_data:

# --- Network (Unchanged) ---
networks:
  noda_network:
    name: noda_network