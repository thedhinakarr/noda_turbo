# noda_turbo/docker-compose.yml

version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:16-alpine
    container_name: noda_turbo_postgres
    restart: always
    ports:
      # The syntax is "HOST_PORT:CONTAINER_PORT"
      - "${POSTGRES_PORT}:5432"
    environment:
      # These variables are read from the .env file at the project root
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      # This named volume persists the database data across container restarts
      - db_data:/var/lib/postgresql/data
    healthcheck:
      # This check ensures the database is fully ready before other services start
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Service (for GraphQL Subscriptions PubSub)
  redis:
    image: redis:7-alpine
    container_name: noda_turbo_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Data Ingestion Service
  ingestor:
    # 'build' tells docker-compose to build an image from a Dockerfile
    build:
      # The context is the monorepo root, so the Dockerfile can access all files
      context: .
      # We point it to the correct Dockerfile for this service
      dockerfile: ./apps/data-ingestion-service/Dockerfile
    container_name: noda_turbo_ingestor
    # 'depends_on' ensures the database is healthy before this service starts
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    environment:
      # Pass the database connection details to our Node.js application
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      NODE_ENV: development
    volumes:
      # This is the most critical part for functionality. It maps the local 'data'
      # folder to the folder inside the container that the service is watching.
      - ./apps/data-ingestion-service/data:/app/apps/data-ingestion-service/data

volumes:
  db_data:
  redis_data:

